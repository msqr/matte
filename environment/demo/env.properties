###############################################################################
# hibernate.dialect <Hibernate Dialect class name>
# 
# The Hibernate dialect that matches the database you're using with Matte.
# 
# Postgres: org.hibernate.dialect.PostgreSQLDialect
# MySQL:    org.hibernate.dialect.MySQLDialect

hibernate.dialect=org.hibernate.dialect.DerbyDialect


###############################################################################
# hibernate.show_sql <boolean>
# 
# Set to 'true' to enable Hibernate SQL debugging.

hibernate.show_sql=false


###############################################################################
# hibernate.max_fetch_depth <integer>
# 
# Set to the maximum join depth for Hibernate. A value of 4 is reasonable, but
# more or less will produce better results depending on your database.

hibernate.max_fetch_depth=6

###############################################################################
# hibernate.jdbc.batch_size <integer>
# 
# The maximum number of JDBC statements to batch into a single operation. A
# value around 10 - 20 is reasonable, but more or less will produce better 
# results depending on your database. For development generally a low value 
# is easier to work with.

hibernate.jdbc.batch_size=25


###############################################################################
# hibernate.cache.use_second_level_cache <boolean>
# 
# Set to 'true' to enable the Hibernate 2nd level cache, 'false' otherwise.

hibernate.cache.use_second_level_cache=true


###############################################################################
# app.setup.admin.required <boolean>
# 
# Set to 'true' to to force the setup wizard to require a logged in admin user
# in order to access. Normally this should be set to 'false' here, because the
# setup wizard will store 'true' in the database to override this value once
# the setup wizard has been run the first time the application starts up.

app.setup.admin.required=false


###############################################################################
# cache.path <path>
# 
# The root directory for cache files. This is where all cached media items 
# will be stored. The application server will need write permissions for this 
# directory to be able to create nested directories and files.

cache.path=matte/cache


###############################################################################
# collection.root.path <path>
# 
# The root directory for all collections. This is where all media items will 
# be stored. The application server will need write permissions for this 
# directory to be able to create nested directories and files.

collection.root.path=matte/collections


###############################################################################
# theme.path <path>
# 
# The root directory for all external themes. This is where all theme 
# resources will be stored for themes that are uploaded by an admin. The 
# application server will need write permissions for this directory to be 
# able to create nested directories and files.

theme.path=matte/themes


###############################################################################
# resource.path <path>
# 
# The root directory for all user resources. This will be the place items
# like a user watermark file will be stored.

resource.path=matte/resources


###############################################################################
# xslt.cache <boolean>
# 
# Set to 'false' to help debug XSLT changes, so each request to an XSLT view
# will cause the XSLT templates to be reloaded. This is not thread-safe and 
# not recommended for a production environment, but is useful when doing 
# development on XSLT views.

xslt.cache=true


###############################################################################
# crypto.salt <string>
# 
# The "salt" used for encrypting passwords. Set this to a random string of
# characters as desired, but beware the more characters used the longer the 
# encrypted passwords will become and they can end up loger than the default
# database column width defined for user passwords. Around 20 characters is a
# good maximum to keep in mind. If you don't want to use any salt then set this
# to an empty value.

crypto.salt=


###############################################################################
# crypto.provider <string>
# 
# The JCE provider to use. The default one included with Java is 'SunJCE'.
# Only change this if you want to use a different provider (for example to use
# a different encryption scheme).

crypto.provider=SunJCE


###############################################################################
# crypto.key.type <string>
# 
# The JCE secret key type used for password-based encryption schemes. For 
# example: 'PBEWithMD5AndDES'. Also see the crypto.pge.salt property.

crypto.key.type=PBEWithMD5AndDES


###############################################################################
# crypto.cipher.type <string>
# 
# The JCE cipher to use for encryption. For example: 'PBEWithMD5AndDES'

crypto.cipher.type=PBEWithMD5AndDES


###############################################################################
# crypto.key <string>
# 
# The password to use for password-based encryption.

crypto.key=Dker984%$7y48hr


###############################################################################
# crypto.pbe.salt <string>
# 
# The salt to use for password-based encryption schemes. The encryption 
# scheme may have specific length requirements. For example the 
# PBEWithMD5AndDES key type requires an 8-byte salt length.

crypto.pbe.salt=$g-0@8~`


###############################################################################
# mail.from <email>
# 
# The email address to send mail from.

mail.from=matte@localhost


###############################################################################
# url.registration.confirm <url>
# 
# The relative URL to confirm an account registration. This URL should inlcude 
# two variables: $[user.login] to hold the login of the user being confirmed,
# and $[result] for the confirmation code. For example:
# '/registerConfirm.do?login=$[user.login]&amp;code=$[result]'. If you set up
# an Apache rewrite rule, you can shorten this URL, for example
# '/confirm/$[user.login]/$[result]'.

url.registration.confirm=/registerConfirm.do?login=$[user.login]&code=$[result]


###############################################################################
# url.forgot-password.confirm <url>
# 
# The relative URL to confirm a forgotten password. This URL should inlcude 
# two variables: $[user.login] to hold the login of the user being confirmed,
# and $[result] for the confirmation code. For example:
# '/confirmForgotPassword.do?login=$[user.login]&amp;code=$[result]'. If you set up
# an Apache rewrite rule, you can shorten this URL, for example
# '/confirmPassword/$[user.login]/$[result]'.

url.forgot-password.confirm=/forgotPasswordConfirm.do?login=$[user.login]&code=$[result]


###############################################################################
# url.shared.album <url>
# 
# The relative URL to view a shared album. This URL should inlcude 
# one variable: $[album.anonymousKey] to hold the anonymous key of the album.

url.shared.album=/album.do?key=$[album.anonymousKey]

###############################################################################
# lucene.index.base.path <directory path>
# 
# The path to a directory that the application will manage the Lucene search
# indices. This directory must allow write access to the user or group the 
# application runs as, as it will try to create directories and files here.

lucene.index.base.path=matte/lucene-index


###############################################################################
# lucene.index.optimize.trigger <int>
# 
# The number of items to index before triggering a Lucene index optimization.

lucene.index.optimize.trigger=50


###############################################################################
# lucene.index.optimize.never <boolean>
# 
# If true, then never try to optimize the Lucene index for searches. If false
# then allow optimizing according to normal parameters (including after re-
# indexing an entire index.

lucene.index.optimize.never=false


###############################################################################
# lucene.update.buffer.size <int>
# 
# The number of index update requests to buffer before actually performing the
# index requests. This has the effect of "batch" indexing, and if set to the 
# value of  1 this mode will be disabled and index requests will occur as they
# arrive to the index service.

lucene.update.buffer.size=10


###############################################################################
# lucene.update.buffer.flush <milliseconds>
# 
# This sets the number of milliseconds the index buffers will be flushed, 
# i.e. any unprocessed items will be indexed even if the index buffer is not
# full. Any value greater than 0 will cause the application to flush the 
# buffers after that many milliseconds has past. Setting this greater than
# 0 only makes sense if index.update.buffer.size is also set to something 
# greater than 1, since when then buffer size is 1 there will really isn't 
# a "buffer" to flush.

lucene.update.buffer.flush=10000


###############################################################################
# lucene.snowball.stemmer.name <name>
# 
# The Lucene Snowball stemmer name to use, i.e. language to support.
# See the Lucene JavaDocs on org.apache.lucene.analysis.snowball.SnowballFilter
# for the available languages and more information.

lucene.snowball.stemmer.name=English


###############################################################################
# index.timezone.java <time zone>
# index.timezone.sql <time zone>
# 
# Set these to the time zone to use in the index. The index.timezone.java is
# to be used in getting java.util.TimeZone instances, and should be set to a 
# time zone offet from GMT so as not to make use of daylight savings time. The 
# index.timezone.sql should be set to the same time zone, but in a format
# recognized by the backend database (or JDBC driver) for executing SQL using
# the same time zone as used by the index.

index.timezone.java=GMT+12
index.timezone.sql=+12


###############################################################################
# media.cache.seconds <integer>
# 
# The number of seconds to return with HTTP Cache-Control response headers,
# to allow clients for caching media items. Setting this to zero means no 
# cache header will be returned, and clients will not cache images.

media.cache.seconds=864000


###############################################################################
# theme.cache.seconds <integer>
# user.resource.cache.seconds <integer>
# 
# The number of seconds to return with HTTP Cache-Control response headers,
# to allow clients for caching theme and user resources. Setting this to zero 
# means no cache header will be returned, and clients will not cache theme 
# resources.

theme.cache.seconds=864000
user.resource.cache.seconds=864000

###############################################################################
# workbiz.threads.core <integer>
# workbiz.threads.max <integer>
# workbiz.threads.keepalive <long> (seconds)
# 
# These values control the java.util.concurrent.ThreadPoolExecutor instance
# used by the WorkBiz for performing system tasks such as importing and 
# exporting media items. This allows tuning the overall stress placed by the 
# application on the host system. The more CPUs available, the more threads
# that can be allocated for processing tasks.

workbiz.threads.core=2
workbiz.threads.max=2
workbiz.threads.keepalive=60


###############################################################################
# feature.registration <boolean>
# 
# Set to "true" to enable user self-registration. Set to "false" to disable
# this feature, meaning only admin users can add new users to Matte.

feature.registration=true


###############################################################################
# feature.upload.applet <boolean>
# 
# Set to "true" to enable the Matte Add Files applet on the "Add" page. This
# allows users to upload entire folders of files without needing to zip them
# up manually. Requires deploying the signed applet JAR into the "applet"
# directory of the webapp.

feature.upload.applet=false


###############################################################################
# ignore.mail.exceptions <boolean>
# 
# Set to "true" to ignore any exception thrown while trying to send an email.
# This can be useful for development environments which do not have access to 
# a mail server.

ignore.mail.exceptions=false

# Derby cannot refer to "bucket" in the group by clause
sql.popularity.index=select \
	(case \
		when mod(item.hits, {0}) >= ({0} / 2) then item.hits + ({0} - mod(item.hits, {0})) \
		else item.hits - mod(item.hits, {0}) \
	end) as bucket, \
	count(item.itemid) as item_count \
from media_item item \
inner join ( \
	select mi.itemid as sitemid \
	from media_item mi \
	inner join album_item ai on mi.itemid = ai.mediaitem_item_hjchildid \
	inner join album a on ai.album_item_hjid = a.albumid \
	where a.owner_ = ? and a.allowanonymous = ? and a.allowbrowse = ? \
) as shared \
on item.itemid = shared.sitemid \
where item.hits > 0 \
group by case \
		when mod(item.hits, {0}) >= ({0} / 2) then item.hits + ({0} - mod(item.hits, {0})) \
		else item.hits - mod(item.hits, {0}) \
	end \
order by bucket desc

sql.avgrate.index=select \
	(case \
		when agg.avgrating is null then 0.0 \
		when agg.avgrating < 0.75 then 0.5 \
		when agg.avgrating < 1.25 then 1.0 \
		when agg.avgrating < 1.75 then 1.5 \
		when agg.avgrating < 2.25 then 2.0 \
		when agg.avgrating < 2.75 then 2.5 \
		when agg.avgrating < 3.25 then 3.0 \
		when agg.avgrating < 3.75 then 3.5 \
		when agg.avgrating < 4.25 then 4.0 \
		when agg.avgrating < 4.75 then 4.5 \
		else 5.0 \
	end) as avg_rating, \
	count(item.itemid) as item_count \
from media_item item \
inner join ( \
	select mi.itemid as sitemid \
	from media_item mi \
	inner join album_item ai on mi.itemid = ai.mediaitem_item_hjchildid \
	inner join album a on ai.album_item_hjid = a.albumid \
	where a.owner_ = ? and a.allowanonymous = ? and a.allowbrowse = ? \
) as shared \
on item.itemid = shared.sitemid \
inner join ( \
	select rating.mediaitem_userrating_hjid as ritemid, \
		avg(rating.rating) as avgrating \
	from media_item_rating rating, media_item item \
	where rating.mediaitem_userrating_hjid = item.itemid \
	group by rating.mediaitem_userrating_hjid \
) as agg \
on item.itemid = agg.ritemid \
group by case \
		when agg.avgrating is null then 0.0 \
		when agg.avgrating < 0.75 then 0.5 \
		when agg.avgrating < 1.25 then 1.0 \
		when agg.avgrating < 1.75 then 1.5 \
		when agg.avgrating < 2.25 then 2.0 \
		when agg.avgrating < 2.75 then 2.5 \
		when agg.avgrating < 3.25 then 3.0 \
		when agg.avgrating < 3.75 then 3.5 \
		when agg.avgrating < 4.25 then 4.0 \
		when agg.avgrating < 4.75 then 4.5 \
		else 5.0 \
	end \
order by avg_rating desc
