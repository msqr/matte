/* ===================================================================
 * BasicIndexData.java
 * 
 * Created May 10, 2008, 7:49 PM
 * 
 * Copyright (c) 2008 Matt Magoffin (spamsqr@msqr.us)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ===================================================================
 * $Id$
 * ===================================================================
 */

package magoffin.matt.ma2.web.applet;

import java.io.File;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.xml.bind.JAXBException;

import magoffin.matt.ma2.domain.AlbumImportType;
import magoffin.matt.ma2.domain.ItemImportType;
import magoffin.matt.ma2.domain.impl.AlbumImportTypeImpl;
import magoffin.matt.ma2.domain.impl.ItemImportTypeImpl;

/**
 * An applet for uploading media into Matte.
 * 
 * @author Matt Magoffin (spamsqr@msqr.us)
 * @version $Revision$ $Date$
 */
public class UploadMedia extends javax.swing.JApplet {
	
	private static final long serialVersionUID = -2493449216309735272L;
	private static final Logger LOG = Logger.getLogger(UploadMedia.class.getName());
	
	private DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode("Root Node");
	private DefaultTreeModel treeModel = new DefaultTreeModel(treeRoot);
	//private JAXBContext jaxbContext =  null;
	
	@Override
	public void init() {
		setBackground(new java.awt.Color(218, 217, 209));
		try {
			java.awt.EventQueue.invokeAndWait(new Runnable() {
				public void run() {
					initComponents();
					/*try {
						jaxbContext = JAXBContext.newInstance("magoffin.matt.ma2.domain");
					} catch ( JAXBException e ) {
						e.printStackTrace();
					}*/
				}
			});
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	@SuppressWarnings("unchecked")
	private void populateFileSelection(File[] files) {
		if ( files == null || files.length < 1 ) {
			return;
		}
		try {
			populateFileSelection(treeRoot, files);
		} catch (JAXBException e) {
			LOG.log(Level.SEVERE, "JAXB exception", e);
			e.printStackTrace();
		}
	}
	
	private void populateFileSelection(MutableTreeNode parent, File[] files) 
	throws JAXBException {
		if ( files == null || files.length < 1 ) {
			return;
		}
		for ( File file : files ) {
			FileSelection selection = new FileSelection();
			selection.setFile(file);
			MutableTreeNode node = new DefaultMutableTreeNode(selection);
			if ( file.isDirectory() ) {
				// album
				AlbumImportType album = new AlbumImportTypeImpl();
				selection.setAlbum(album);
			} else {
				// item
				ItemImportType item = new ItemImportTypeImpl();
				selection.setItem(item);
			}
			if ( LOG.isLoggable(Level.FINE) ) {
				LOG.fine("Adding [" +selection +"] selection to tree model");
			}
			treeModel.insertNodeInto(node, parent, parent.getChildCount());
			if ( file.isDirectory() ) {
				populateFileSelection(node, file.listFiles());
			}
		}
	}
	
	/** This method is called from within the init() method to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        collectionLabel = new javax.swing.JLabel();
        collectionCombo = new javax.swing.JComboBox();
        mediaTzLabel = new javax.swing.JLabel();
        localTzLabel = new javax.swing.JLabel();
        autoAlbumLabel = new javax.swing.JLabel();
        mediaTzCombo = new javax.swing.JComboBox();
        localTzCombo = new javax.swing.JComboBox();
        autoAlbumCheckBox = new javax.swing.JCheckBox();
        fileSelectionPanel = new javax.swing.JPanel();
        chooseFilesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedFilesTree = new javax.swing.JTree(treeModel);
        selectedFilesTree.setRootVisible(false);
        selectedFilesTree.setShowsRootHandles(true);
        clearFilesButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(218, 217, 209));

        optionsPanel.setBackground(getBackground());
        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        collectionLabel.setText("Collection");

        collectionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        mediaTzLabel.setText("Media Time Zone");

        localTzLabel.setText("Local Time Zone");

        autoAlbumLabel.setText("Auto Album");

        mediaTzCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        localTzCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        autoAlbumCheckBox.setBackground(getBackground());
        autoAlbumCheckBox.setText("<html>Selecting this option when uploading a zip archive<br>\nwill turn folders in the archive into albums.</html>");
        autoAlbumCheckBox.setActionCommand("autoalbum");
        autoAlbumCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        org.jdesktop.layout.GroupLayout optionsPanelLayout = new org.jdesktop.layout.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(collectionLabel)
                    .add(mediaTzLabel)
                    .add(localTzLabel)
                    .add(autoAlbumLabel))
                .add(27, 27, 27)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(autoAlbumCheckBox)
                    .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, localTzCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, mediaTzCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, collectionCombo, 0, 178, Short.MAX_VALUE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(collectionLabel)
                    .add(collectionCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mediaTzLabel)
                    .add(mediaTzCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(localTzLabel)
                    .add(localTzCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(autoAlbumLabel)
                    .add(autoAlbumCheckBox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileSelectionPanel.setBackground(getBackground());
        fileSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        chooseFilesButton.setText("Choose...");
        chooseFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFilesActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(selectedFilesTree);

        clearFilesButton.setText("Clear");
        clearFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout fileSelectionPanelLayout = new org.jdesktop.layout.GroupLayout(fileSelectionPanel);
        fileSelectionPanel.setLayout(fileSelectionPanelLayout);
        fileSelectionPanelLayout.setHorizontalGroup(
            fileSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, fileSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(fileSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(clearFilesButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(chooseFilesButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        fileSelectionPanelLayout.setVerticalGroup(
            fileSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileSelectionPanelLayout.createSequentialGroup()
                .add(fileSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fileSelectionPanelLayout.createSequentialGroup()
                        .add(chooseFilesButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(clearFilesButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addContainerGap())
        );

        addButton.setText("Add");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, fileSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, optionsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(addButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(fileSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(optionsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(addButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void chooseFilesActionPerformed(@SuppressWarnings("unused")
	java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFilesActionPerformed
		JFileChooser chooser = new JFileChooser();
		chooser.setMultiSelectionEnabled(true);
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		int chooseResult = chooser.showOpenDialog(null);
		if ( chooseResult != JFileChooser.APPROVE_OPTION ) {
			return;
		}
		File[] files = chooser.getSelectedFiles();
		if ( LOG.isLoggable(Level.INFO) ) {
			LOG.info("Got " +Arrays.toString(files));
		}
		populateFileSelection(files);
		treeModel.reload();
	}//GEN-LAST:event_chooseFilesActionPerformed

	private void clearFilesButtonActionPerformed(@SuppressWarnings("unused")
	java.awt.event.ActionEvent evt) {                                                 
		treeRoot.removeAllChildren();
		treeModel.reload();
	}                                                 
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox autoAlbumCheckBox;
    private javax.swing.JLabel autoAlbumLabel;
    private javax.swing.JButton chooseFilesButton;
    private javax.swing.JButton clearFilesButton;
    private javax.swing.JComboBox collectionCombo;
    private javax.swing.JLabel collectionLabel;
    private javax.swing.JPanel fileSelectionPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox localTzCombo;
    private javax.swing.JLabel localTzLabel;
    private javax.swing.JComboBox mediaTzCombo;
    private javax.swing.JLabel mediaTzLabel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JTree selectedFilesTree;
    // End of variables declaration//GEN-END:variables
	
}
