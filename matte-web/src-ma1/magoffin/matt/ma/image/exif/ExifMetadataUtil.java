/* ===================================================================
 * ExifMetadataUtil.java
 *
 * Copyright (c) 2003 Matt Magoffin
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ===================================================================
 * $Id: ExifMetadataUtil.java,v 1.1 2006/06/03 22:26:19 matt Exp $
 * ===================================================================
 */

package magoffin.matt.ma.image.exif;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import magoffin.matt.ma.MediaAlbumException;
import magoffin.matt.ma.MediaMetadata;
import magoffin.matt.ma.xsd.InitParamConfig;
import magoffin.matt.ma.xsd.MediaHandlerConfig;
import magoffin.matt.util.ArrayUtil;

import org.apache.log4j.Logger;

import com.drew.imaging.jpeg.JpegMetadataReader;
import com.drew.imaging.jpeg.JpegProcessingException;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.exif.ExifDirectory;

/**
 * Utility methods for EXIF classes.
 * 
 * @author Matt Magoffin (spamsqr@msqr.us)
 * @version $Revision: 1.1 $ $Date: 2006/06/03 22:26:19 $
 */
public final class ExifMetadataUtil 
{
	/** The EXIF make/model wildcard match character: <code>*</code> */
	public static final String EXIF_ANY_MAKE_MODEL_KEY = "*";
	
	private static final Logger log = Logger.getLogger(ExifMetadataUtil.class);

/**
 * Initialize a Map of Maps: <em>make</em> -&gt; <em>model<em>
 * -&gt; ExifMetadataExtractor instance
 * 
 * @param config the config to use
 * @return a Map suitable for passing to {@link #getMetadata(Metadata, Map)}
 * @throws MediaAlbumException if an error occurs
 */
public static Map getExifMakeMap(MediaHandlerConfig config) throws MediaAlbumException 
{
	Map exifMakeMap = null;
	
	// set up the ExifMetadataExtractors
	if ( config.getInitParamCount() > 0 ) {
		InitParamConfig[] param = config.getInitParam();
		Map tmpMakeMap = new HashMap();
		for ( int i = 0; i < param.length; i++ ) {
			String name = param[i].getName().toLowerCase();
			String[] data = ArrayUtil.split(name,':',-1);
			if ( data.length == 3 && data[0].equals("exif") ) {
				String impl = param[i].getContent();
				try {
					ExifMetadataExtractor exifExtractor = 
						(ExifMetadataExtractor)Class.forName(impl).newInstance();
					String make = data[1];
					String model = data[2];
					if ( model.equals(EXIF_ANY_MAKE_MODEL_KEY) ) {
						// put the implementation directly into the map
						if ( tmpMakeMap.containsKey(make) ) {
							throw new MediaAlbumException(
								"The ExifMetadataExctractor make '" +make
								+"' is already configured with " 
								+tmpMakeMap.get(make).getClass().getName()
								+", can't reconfigure to " +impl);
						}
						tmpMakeMap.put(make,exifExtractor);
					} else {
						// put the implementation in a nested map
						Map modelMap = null;
						if ( tmpMakeMap.containsKey(make) ) {
							modelMap = (Map)tmpMakeMap.get(make);
						} else {
							modelMap = new HashMap();
							tmpMakeMap.put(make,modelMap);
						}
						modelMap.put(model,exifExtractor);
					}
				} catch ( Exception e ) {
					throw new MediaAlbumException(
						"Unable to get ExifMetadataExtractor implementation",e);
				}
			}
		}
		exifMakeMap = tmpMakeMap;
	}
	return exifMakeMap;
}

/**
 * Get a Metadata object from JPEG EXIF data.
 * 
 * <p>This method does not throw any exceptions, and may return <em>null</em>.</p>
 * 
 * @param mediaFile JPEG file stream
 * @param exifMakeMap Map, as generated by {@link #getExifMakeMap(MediaHandlerConfig)}
 * @return MediaMetadata object
 */
public static MediaMetadata getJpegMetadata(File mediaFile, Map exifMakeMap ) {
	Metadata metadata = null;
	try {
		metadata = JpegMetadataReader.readMetadata(mediaFile);
	} catch (JpegProcessingException jpe) {
		log.warn("Error reading JPEG metadata: " +jpe);
	}
	return ExifMetadataUtil.getMetadata(metadata, exifMakeMap);
}


/**
 * Get an ExifMetadata object from the supplied ImageInfo object.
 * 
 * @param imageMeta the image metadata to use
 * @param exifMakeMap Map of Maps: <em>make</em> -&gt; <em>model<em>
 * -&gt; ExifMetadataExtractor instance
 * @return ExifMetadata
 */
public static ExifMetadata getMetadata(Metadata imageMeta, Map exifMakeMap) 
{
	ExifMetadata meta = new ExifMetadata();

	if ( imageMeta == null ) {
		return meta;
	}

	Directory dir = imageMeta.getDirectory(ExifDirectory.class);
	String make = dir.getString(ExifDirectory.TAG_MAKE);
	String model = dir.getString(ExifDirectory.TAG_MODEL);
	if ( log.isDebugEnabled() ) {
		log.debug("EXIF make = " +make +", model = " +model);
	}

	if ( make == null ) {
		make = EXIF_ANY_MAKE_MODEL_KEY;
	}
	if ( model == null ) {
		model = EXIF_ANY_MAKE_MODEL_KEY;
	}
	String makeKey = make.toLowerCase();
	String modelKey = model.toLowerCase();

	if ( !exifMakeMap.containsKey(makeKey) ) {
		// test for generic
		if ( exifMakeMap.containsKey(EXIF_ANY_MAKE_MODEL_KEY) ) {
			makeKey = EXIF_ANY_MAKE_MODEL_KEY;
		} else {
			return null;
		}
	}

	ExifMetadataExtractor extractor = null;
	Object o = exifMakeMap.get(makeKey);
	if ( o instanceof ExifMetadataExtractor ) {
		extractor = (ExifMetadataExtractor)o;
	} else {
		Map modelMap = (Map)o;
		if ( !modelMap.containsKey(modelKey) ) {
			if ( exifMakeMap.containsKey(EXIF_ANY_MAKE_MODEL_KEY) ) {
				// no handler for model, fall back to generic handler
				o = exifMakeMap.get(EXIF_ANY_MAKE_MODEL_KEY);
				if ( o instanceof ExifMetadataExtractor ) {
					extractor = (ExifMetadataExtractor)o;
				} else {
					return null;
				}
			} else {
				return null;
			}
		} else {
			extractor = (ExifMetadataExtractor)modelMap.get(modelKey);
		}
	}

	extractor.popluateMetadata(make,model,imageMeta,meta);

	return meta;
}

} // class ExifMetadataUtil
