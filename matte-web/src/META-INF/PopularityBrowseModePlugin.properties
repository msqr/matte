###############################################################################
# Defaults settings for PopularityBrowseModePlugin
# These can be over-ridden in env.properties.
# $Id$
###############################################################################

###############################################################################
# sql.popularity.index <sql>
# 
# The SQL query used for the popularity browse UI.
#
# The SQL string contains these template parameters:
# 
# {0} - the bucket size integer, e.g. 20
# 
# It accepts these SQL parameters:
# 
# 1: user ID, to find items of one user
# 2: boolean "allow anonymous" boolean flag (TRUE or FALSE)
# 3: boolean "allow browse" boolean flat (TRUE or FALSE)

sql.popularity.index=select \
	(case \
		when mod(item.hits, {0}) >= ({0} / 2) then item.hits + ({0} - mod(item.hits, {0})) \
		else item.hits - mod(item.hits, {0}) \
	end) as bucket, \
	count(item.itemid) as item_count \
from media_item item \
inner join ( \
	select mi.itemid as sitemid \
	from media_item mi \
	inner join album_item ai on mi.itemid = ai.mediaitem_item_hjchildid \
	inner join album a on ai.album_item_hjid = a.albumid \
	where a.owner_ = ? and a.allowanonymous = ? and a.allowbrowse = ? \
) as shared \
on item.itemid = shared.sitemid \
where item.hits > 0 \
group by bucket \
order by bucket desc

# Derby note: the "group by bucket" is not supported. To work around, 
# add this property to env.properties and replace "bucket" with the entire
# "case ... end" statement from the select clause

###############################################################################
# sql.popularity.section <sql>
# 
# The SQL query used for the popularity browse UI for populating the items
# of a single index section.
#
# It accepts these SQL parameters:
# 
# 1: user ID, to find items of one user
# 2: boolean "allow anonymous" boolean flag (TRUE or FALSE)
# 3: boolean "allow browse" boolean flat (TRUE or FALSE)
# 4: integer popularity lower bound (inclusive)
# 5: integer popularity upper bound (exclusive)

sql.popularity.section=select item.itemid as item_id, item.name_ as item_name,  \
item.mime as item_mime \
from media_item item \
inner join ( \
	select mi.itemid as sitemid \
	from media_item mi \
	inner join album_item ai on mi.itemid = ai.mediaitem_item_hjchildid \
	inner join album a on ai.album_item_hjid = a.albumid \
	where a.owner_ = ? and a.allowanonymous = ? and a.allowbrowse = ? \
) as shared \
on item.itemid = shared.sitemid \
where item.hits >= ? and item.hits < ? \
and item.hits > 0 \
order by hits desc, itemid asc
