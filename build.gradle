plugins {
    id 'war'
}

version = "${version}"
description = 'Matte'
archivesBaseName = 'matte'

sourceCompatibility = 1.5
targetCompatibility = 1.5

repositories {
    mavenLocal()
	mavenCentral()
	maven {
		url "https://repository.jboss.org/nexus/content/groups/public"
	}
	maven {
		url "https://maven.java.net/content/repositories/releases"
	}
}

ext {
	env = project.hasProperty('env') ? project.env : 'local'
	slf4jVersion = '1.7.24'
	springVersion = '3.2.17.RELEASE'
    libraries = [
        // Test dependencies.
        hamcrest: 'org.hamcrest:hamcrest-library:1.3',
        junit: 'junit:junit:4.13.2',
    ]
}

sourceSets {
	main {
		resources {
			srcDir "environment/${env}"
		}
	}
}

configurations {
	all*.exclude group: 'commons-logging'
	all*.exclude group: 'org.apache.geronimo.specs'
	all*.exclude module: 'avalon-framework'
	all*.exclude module: 'ehcache-terracotta'
	all*.exclude module: 'hibernate'
	all*.exclude module: 'jaxen'
	all*.exclude module: 'jaxp-api'
	all*.exclude module: 'jaxrpc-api'
	all*.exclude module: 'jaxws-api'
	all*.exclude module: 'jsr173_api'
	all*.exclude module: 'saxon'
	all*.exclude module: 'saxon-dom'
	all*.exclude module: 'spring'
	all*.exclude module: 'woodstox-core-asl'
	all*.exclude module: 'xalan'
	all*.exclude module: 'xmldsig'
	all*.exclude module: 'xmlParserAPIs'
}

dependencies {
	// Logging
	implementation 'log4j:log4j:1.2.17'
	implementation "org.slf4j:slf4j-api:${slf4jVersion}"
	implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
	implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
	
	// Utilities
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'net.sf.ehcache:ehcache:1.7.2'
	implementation 'gnu-regexp:gnu-regexp:1.1.4'
	implementation 'javax.activation:activation:1.1.1'
	implementation 'cglib:cglib:2.2.2'
	implementation 'org.bouncycastle:bcprov-jdk14:1.43'
	implementation 'rhino:js:1.7R2'
	implementation 'joda-time:joda-time:2.4'
	
	// Apache Commons
	implementation 'commons-beanutils:commons-beanutils:1.8.3'
	implementation 'commons-codec:commons-codec:1.9'
	implementation 'commons-collections:commons-collections:3.2.1'
	implementation 'commons-el:commons-el:1.0'
	implementation 'commons-fileupload:commons-fileupload:1.3.2'
	providedCompile 'commons-httpclient:commons-httpclient:3.1'
	implementation 'commons-io:commons-io:1.4'
	implementation 'commons-lang:commons-lang:2.2'
	implementation 'commons-pool:commons-pool:1.2'
	
	// JAXB, XML
	implementation 'javax.xml:xmldsig:1.0'
	implementation 'javax.xml.parsers:jaxp-api:1.4.5'
	implementation('xml-apis:xml-apis') {
        version {
            strictly '1.4.01'
        }
    }
	implementation 'xerces:xercesImpl:2.11.0'
	implementation 'dom4j:dom4j:1.6.1'
	implementation 'net.sf.saxon:Saxon-HE:9.6.0-3'
	implementation 'org.codehaus.woodstox:wstx-asl:3.2.9'
	implementation('javax.xml.bind:jaxb-api') {
		version {
			strictly '1.0'
		}
	}
	implementation 'com.sun.xml.bind:jaxb-impl:1.0.6'
	implementation 'org.jvnet.jaxbcommons:jaxbcommons-core:1.0.4.7'
	implementation 'org.jvnet.hyperjaxb2:hyperjaxb2-core:0.6.5'
	implementation 'org.apache.ws.commons.schema:XmlSchema:1.4.7'
	
	// JSON
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.8.7'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.8.7'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
	
	// Media support
	implementation 'batik:batik-parser:1.6-1'
	implementation 'batik:batik-rasterizer:1.6-1'
	implementation 'batik:batik-svg-dom:1.6-1'
	implementation 'batik:batik-xml:1.6-1'
	implementation 'org.im4java:im4java:1.2.0'
	implementation 'org.opensaml:opensaml:1.1'
	implementation 'com.googlecode.mp4parser:isoparser:1.1.22'
	implementation 'com.drewnoakes:metadata-extractor:2.18.0'
	
	// Lucene
	implementation 'org.apache.lucene:lucene-core:2.9.4'
	implementation 'org.apache.lucene:lucene-snowball:2.9.4'
	
	// JDBC
	implementation 'javax.transaction:jta:1.0.1B'
	implementation 'org.hibernate:hibernate-core:3.3.2.GA'
	implementation 'org.hibernate:hibernate-ehcache:3.3.2.GA'
	testImplementation 'org.apache.derby:derby:10.8.3.0'
	testImplementation 'mysql:mysql-connector-java:5.1.18'
	testImplementation 'org.postgresql:postgresql:42.0.0.jre7'
	
	// Services
	implementation 'opensymphony:quartz:1.6.3'

	// Spring	
	implementation "org.springframework:spring-aop:${springVersion}"
	implementation "org.springframework:spring-context:${springVersion}"
	implementation "org.springframework:spring-context-support:${springVersion}"
	implementation "org.springframework:spring-core:${springVersion}"
	implementation "org.springframework:spring-jdbc:${springVersion}"
	implementation "org.springframework:spring-orm:${springVersion}"
	implementation "org.springframework:spring-webmvc:${springVersion}"
	
	// Web
	providedCompile 'javax.mail:mail:1.4.7'
	implementation 'javax.servlet:jstl:1.2'
	runtimeOnly 'org.apache.taglibs:taglibs-standard-impl:1.2.1'
	providedCompile 'javax.servlet.jsp:jsp-api:2.1'
	providedCompile 'javax.servlet:servlet-api:2.5'

	// Web Service
	implementation 'org.apache.ws.commons.axiom:axiom-impl:1.2.9'
	implementation 'org.springframework.ws:spring-ws-core:1.5.10'
	implementation 'org.springframework.ws:spring-ws-core-tiger:1.5.10'
	implementation 'org.springframework.ws:spring-ws-security:1.5.10'
	implementation 'org.apache.santuario:xmlsec:2.0.2'
	implementation 'org.apache.ws.security:wss4j:1.5.11'
	implementation 'com.sun.xml.wss:xws-security_jaxrpc:2.0-FCS'
	
	// Local libs
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	
	providedCompile 'jmagick:jmagick:6.6.9'

    // Testing
    testImplementation 	libraries.junit,
		        		libraries.hamcrest
	testImplementation "org.springframework:spring-test:${springVersion}"
	testImplementation 'org.subethamail:subethasmtp:3.1.6'
	testImplementation 'org.mortbay.jetty:jetty:6.1.26'
}

[
    compileJava,
    compileTestJava
].each() {
    it.options.compilerArgs += [
        "-Xlint:all",
        "-Xlint:-options",
        "-Xlint:-path",
        "-Xlint:-try"
    ]
    it.options.encoding = "UTF-8"
    if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
        it.options.compilerArgs += ["-Werror"]
    }
}

compileTestJava {
    options.compilerArgs += [
        "-Xlint:-serial"
    ]
}

jar.manifest {
    attributes('Implementation-Title': name,
    'Implementation-Version': version,
    'Built-By': System.getProperty('user.name'),
    'Built-JDK': System.getProperty('java.version'),
    'Source-Compatibility': sourceCompatibility,
    'Target-Compatibility': targetCompatibility)
}

javadoc.options {
    encoding = 'UTF-8'
    use = true
    links 'https://docs.oracle.com/en/java/javase/17/docs/api/'
    source = "17"
}

// Disable JavaDoc doclint on Java 8. It's annoying.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// For jdk10 we must explicitly choose between html4 and html5, otherwise we get a warning
if (JavaVersion.current().isJava10Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addBooleanOption('html5', true)
        }
    }
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.named('test') {
    useJUnitPlatform()
}

// At a test failure, log the stack trace to the console so that we don't
// have to open the HTML in a browser.
test {
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
    }
    maxHeapSize = '1500m'
}
